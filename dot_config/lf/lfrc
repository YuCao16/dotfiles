# interpreter for shell commands

set shell zsh

set icons
set sortby name
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml:lost+found"
set mouse
set period 3
set findlen 2
set incsearch

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
# set shellopts '-eu'
set shellopts '-eu:--shwordsplit'	# https://github.com/gokcehan/lf/wiki/Tips#split-words-by-default-in-zsh

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

#                          Commands & Functions

# make sure trash folder exists
%mkdir -p ~/.trash

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        # *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
        *) for f in $fx; do setsid &$OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd touch $touch "$(echo $* | tr ' ' '\ ')"
cmd on-quit   $"$HOME/.config/lf/cleaner"

# set terminal title to current working directory
cmd on-cd &{{
	printf "\033]0; $PWD\007" > /dev/tty
}}

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
cmd delete ${{
    clear
    tput bold
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
  names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
  echo $names | tr ' ' '\n' | pbcopy
}}

# Copy the absolute paths of selections separated by \n
cmd copy-absolute-path ${{
  echo $fx | tr ' ' '\n' | pbcopy
}}

# define a custom 'moveto' command
cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ~/.config/directories | fzf | sed 's|~|$HOME|' )" &&
	if [ -n "$dest" ]; then
		for x in $fx; do
			eval mv -iv \"$x\" \"$dest\"
		done &&
		lf -remote 'send echo ðŸšš File(s) moved.'
	fi
}}

# define a custom 'copyto' command
cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ~/.config/directories | fzf | sed 's|~|$HOME|' )" &&
	if [ -n "$dest" ]; then
		for x in $fx; do
			eval cp -ivr \"$x\" \"$dest\"
		done &&
		lf -remote 'send echo ðŸ“‹ File(s) copied.'
	fi
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
	*) echo "Unsupported format";;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Execute shell command on selection
cmd embed $$@ $fx

# Select all
cmd select-all :unselect; invert

#                           Mapping

# 	Unmap some defaults
map gh
map m
map y

# 	Basic

# use enter for shell commands
map <enter> shell

# dedicated keys for file opener actions
# map o &mimeopen $f
map o open

# map O $mimeopen --ask $f

# dedicated keys for file opener actions
# map o &mimeopen $f
map o open
# map O $mimeopen --ask $f

# 	File Operations
# map A rename
map r push :rename<space>
map D delete
map T trash

# 	Navigation
map <m-1> open
map . set hidden!

# 	Utils
map i $(bat --paging=always $f)
map yy copy
map yn copy-filename
map yP copy-absolute-path
# search a file or directory and then make lf select it
map <c-f> $lf -remote "send $id select '$(fd --hidden --follow --exclude .git --exclude .DS_Store | fzf)'"

# Fast navigation
map Jh cd ~
map Jd cd ~/Downloads
map Jg cd ~/github
map Jc cd ~/.config
